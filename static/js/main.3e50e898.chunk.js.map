{"version":3,"sources":["State.js","App.js","serviceWorker.js","index.js"],"names":["dayTime","hours","minutes","Number","isNaN","RangeError","easyStretching","title","steps","order","action","count","basicStretching","initAppState","schedule","start","template","current","updateAppState","state","console","log","newState","type","selected","timeString","String","Math","floor","padStart","mins","toFixed","StateContext","React","createContext","ScheduleItem","props","startTime","item","dispatch","useContext","style","className","onClick","Schedule","map","key","TrainingStep","step","TrainingEvent","training","App","useReducer","appState","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e50e898.chunk.js","sourcesContent":["\nfunction dayTime(hours, minutes) {\n  if (Number.isNaN(minutes) || minutes < 0 || minutes > 59) {\n    throw RangeError(`Minutes ${minutes} out of range`);\n  }\n  if (Number.isNaN(hours) || hours < 0 || hours > 23) {\n    throw RangeError(`Hours ${hours} out of range`);\n  }\n  return hours * 60 + minutes;\n}\n\nconst easyStretching = {\n  title: 'Разминка',\n  steps: [\n    {\n      order: 1,\n      action: 'Подъём левой ноги',\n      count: 1,\n    },\n    {\n      order: 2,\n      action: 'Подъём правой руки',\n      count: 2,\n    },\n    {\n      order: 3,\n      action: 'Подъём правой ноги',\n      count: 1,\n    },\n    {\n      order: 4,\n      action: 'Подъём левой руки',\n      count: 2,\n    },\n  ],\n};\n\nconst basicStretching = {\n  title: 'Основное упражнение',\n  steps: [\n    {\n      order: 1,\n      action: 'Подъём левой ноги',\n      count: 2,\n    },\n    {\n      order: 2,\n      action: 'Подъём правой руки',\n      count: 4,\n    },\n    {\n      order: 3,\n      action: 'Подъём правой ноги',\n      count: 2,\n    },\n    {\n      order: 4,\n      action: 'Подъём левой руки',\n      count: 4,\n    },\n  ],\n};\n\nexport function initAppState() {\n  // const schedule = [];\n  // let now = 9 * 60;\n  // const step = 15;\n  // for (let i = 0; i < 20; i++) {\n  //   const hours = String(Math.floor(now / 60)).padStart(2, 0);\n  //   const minutes = String(Number(now % 60).toFixed()).padStart(2, 0);\n  //   schedule.push({ key: i, time: `${hours}:${minutes}`, action: 'Zym' });\n  //   now += step;\n  // }\n\n  return {\n    schedule: [\n      {\n        start: dayTime(9, 15),\n        template: easyStretching,\n      },\n      {\n        start: dayTime(11, 0),\n        template: easyStretching,\n      },\n      {\n        start: dayTime(13, 45),\n        template: basicStretching,\n      },\n      {\n        start: dayTime(15, 15),\n        template: easyStretching,\n      },\n      {\n        start: dayTime(17, 30),\n        template: basicStretching,\n      },\n      {\n        start: dayTime(19, 45),\n        template: easyStretching,\n      },\n    ],\n    current: null,\n  };\n}\n\nexport function updateAppState(state, action/* : Action */) {\n  console.log(action);\n  let newState = state;\n  switch (action.type) {\n    case 'SELECT_TRAINING': {\n      if (action.selected) {\n        newState = {\n          ...state,\n          current: action.selected,\n        };\n      }\n      break;\n    }\n    case 'ADD_TRAINING':\n      break;\n    case 'EDIT_TRAINING':\n      break;\n    case 'DELETE_TRAINING':\n      break;\n    case 'START_TRAINING':\n      break;\n    case 'CANCEL_TRAINING':\n      break;\n    case 'FINISH_TRAINING':\n      break;\n    case 'RESET_ALL':\n      newState = initAppState();\n      break;\n    default:\n      break;\n  }\n  // console.log(newState);\n  return newState;\n}\n\nexport function timeString(minutes) {\n  const hours = String(Math.floor(minutes / 60)).padStart(2, 0);\n  const mins = String(Number(minutes % 60).toFixed()).padStart(2, 0);\n\n  return `${hours}:${mins}`;\n}\n","import React, { useContext } from 'react';\nimport './App.css';\nimport { initAppState, updateAppState, timeString } from './State';\n\nconst StateContext = React.createContext(null);\n\nfunction ScheduleItem(props) {\n  const startTime = timeString(props.item.start);\n  const dispatch = useContext(StateContext);\n\n  let style = 'schedule-item';\n  if (props.selected) {\n    style += ' schedule-item-selected';\n  }\n\n  return (\n    <button\n      className={style}\n      type=\"button\"\n      onClick={() => {\n        dispatch({ type: 'SELECT_TRAINING', selected: props.item });\n      }}\n    >\n      <p>{startTime}</p>\n      <p>{props.item.template.title}</p>\n    </button>\n  );\n}\n\nfunction Schedule(props) {\n  return (\n    <nav className=\"schedule-pane\">\n      <ul className=\"schedule-list\">\n        {props.schedule.map((item) => (\n          <li key={item.start}>\n            <ScheduleItem item={item} selected={item === props.current} />\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n}\n\nfunction TrainingStep(props) {\n  return (\n    <tr>\n      <td className=\"step-action\">{props.step.action}</td>\n      <td className=\"step-value\">{props.step.count}</td>\n    </tr>\n  );\n}\n\nfunction TrainingEvent(props) {\n  // const dispatch = React.useContext(StateContext);\n  if (!props.training) {\n    return (\n      <div className=\"training-pane training-pane-empty\">\n        <div className=\"training-placeholder\">\n          <p>Выберите тренировку из списка</p>\n        </div>\n      </div>\n    );\n  }\n\n  const startTime = timeString(props.training.start);\n\n  return (\n    <div className=\"training-pane\">\n      <p className=\"training-time\">{startTime}</p>\n      <p className=\"training-title\">{props.training.template.title}</p>\n\n      <div>\n        <hr />\n        <h3 className=\"training-steps\">Программа тренировки</h3>\n        {/* <ul className=\"step-list\"> */}\n        <table>\n          <thead>\n            <tr>\n              <td>Движение</td>\n              <td>Повторов</td>\n            </tr>\n          </thead>\n          <tbody>\n            {props.training.template.steps.map((step) => (\n              <TrainingStep step={step} key={step.order} />\n            ))}\n          </tbody>\n        </table>\n        {/* </ul> */}\n      </div>\n      <div className=\"training-commands\">\n        {/* <button type=\"button\">Add training</button> */}\n        {/* <button type=\"button\">Edit training</button> */}\n        <button type=\"button\">Start now</button>\n      </div>\n    </div>\n  );\n}\n\n\nfunction App() {\n  const [appState, dispatch] = React.useReducer(updateAppState, {}, initAppState);\n\n  return (\n    <StateContext.Provider value={dispatch}>\n      <section className=\"App\">\n        <Schedule schedule={appState.schedule} current={appState.current} />\n        <TrainingEvent training={appState.current} />\n      </section>\n    </StateContext.Provider>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}